# ðŸ“Œ Title: Sentiment Analysis using TF-IDF and Logistic Regression
# ðŸ“Œ Deliverable: Jupyter Notebook showing Preprocessing, Modeling, and Sentiment Evaluation

# âœ… Step 1: Import Required Libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import re
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# âœ… Step 2: Download Stopwords
nltk.download('stopwords')

# âœ… Step 3: Load or Create Sample Dataset (Customer Reviews)
data = pd.DataFrame({
    'Review': [
        "I love this product! It's amazing.",
        "Worst service ever. Very disappointed.",
        "Pretty good experience overall.",
        "I am not happy with the quality.",
        "Fantastic quality and fast delivery!",
        "Horrible experience, I want a refund.",
        "Totally worth the money!",
        "Poor packaging and slow delivery.",
        "Absolutely wonderful, exceeded expectations.",
        "Terrible, never buying again."
    ],
    'Sentiment': [1, 0, 1, 0, 1, 0, 1, 0, 1, 0]  # 1 = Positive, 0 = Negative
})

# âœ… Step 4: Preprocessing (Clean text)
stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = text.lower()                              # Lowercase
    text = re.sub(r'[^a-z\s]', '', text)             # Remove punctuation/numbers
    words = text.split()                             # Tokenize
    words = [word for word in words if word not in stop_words]  # Remove stopwords
    return " ".join(words)

data['Clean_Review'] = data['Review'].apply(preprocess)

# âœ… Step 5: TF-IDF Vectorization
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(data['Clean_Review'])   # Features
y = data['Sentiment']                                # Labels

# âœ… Step 6: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# âœ… Step 7: Modeling (Logistic Regression)
model = LogisticRegression()
model.fit(X_train, y_train)

# âœ… Step 8: Sentiment Evaluation (Accuracy, Report, Confusion Matrix)
y_pred = model.predict(X_test)

print("\nâœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nâœ… Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix Plot
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=["Negative", "Positive"], yticklabels=["Negative", "Positive"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
